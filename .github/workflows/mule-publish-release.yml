name: "Publish new release"

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    name: Publish new release
    runs-on: ubuntu-latest

    env:
      CLOUDHUB_CONNECTED_APP_CLIENT_ID: ${{ secrets.CLOUDHUB_API_TEAM_CONNECTED_APP_CLIENT_ID_DEV }}
      CLOUDHUB_CONNECTED_APP_CLIENT_SECRET: ${{ secrets.CLOUDHUB_API_TEAM_CONNECTED_APP_CLIENT_SECRET_DEV }}
      ## Mulesoft Nexus Repository Credentials
      MULE_NEXUS_USERNAME: ${{ secrets.MULE_NEXUS_USERNAME }}
      MULE_NEXUS_PASSWORD: ${{ secrets.MULE_NEXUS_PASSWORD }}
      # Environment Specific
      MULE_KEY: ${{ secrets.MULE_KEY_DEV }}
      
    if: github.event.pull_request.merged == true # only merged pull requests must trigger this job

    steps:
      - name: Extract version from branch name (for release branches)
        if: startsWith(github.event.pull_request.head.ref, 'release/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#release/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Extract version from branch name (for hotfix branches)
        if: startsWith(github.event.pull_request.head.ref, 'hotfix/')
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION=${BRANCH_NAME#hotfix/}
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false

      - name: Merge main into develop branch
        uses: thomaseizinger/create-pull-request@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          head: main
          base: develop
          title: Merge main into develop branch
          body: |
            This PR merges the main branch back into develop.
            This happens to ensure that the updates that happend on the release branch.

      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/settings.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Retrieve Exchange access token
        run: |
          export EXCHANGE_ACCESS_TOKEN=$(curl -s "https://anypoint.mulesoft.com/accounts/api/v2/oauth2/token" \
            -X POST -H "Content-Type: application/json" \
            -d "{\"grant_type\": \"client_credentials\", \"client_id\": \"$CLOUDHUB_CONNECTED_APP_CLIENT_ID\", \"client_secret\": \"$CLOUDHUB_CONNECTED_APP_CLIENT_SECRET\"}" \
            | sed -n 's|.*"access_token":"\([^"]*\)".*|\1|p')
          echo EXCHANGE_API_TEAM_ACCESSS_TOKEN=$EXCHANGE_ACCESS_TOKEN >> $GITHUB_ENV
          echo EXCHANGE_CORE_ACCESS_TOKEN=$EXCHANGE_ACCESS_TOKEN >> $GITHUB_ENV

      - name: Build and test
        run: mvn clean package 
          -s settings.xml 
          -Dmule.key="$MULE_KEY" 

      - name: Publish package
        run: mvn 
          deploy:deploy-file 
          -s settings.xml 
          -DskipTests 
          -DpomFile=pom.xml 
          -DgeneratePom=false
          -Durl=https://maven.pkg.github.com/${{github.repository}} 
          -Dfile="$(ls -1 target/*.jar)" 
          -DrepositoryId=github 
          -Dpackaging=jar 
          -Dclassifier=mule-application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}